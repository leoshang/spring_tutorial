<?xml version="1.0" encoding="UTF-8"?>
<!-- TODO 4: Add the context namespace -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
                        http://www.springframework.org/schema/mvc   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
              
    <!-- Autowired
    <bean class="accounts.web.AccountController">
    	<constructor-arg ref="accountManager"/>
    </bean>-->

    <context:component-scan base-package="accounts.web" />
	<!-- TODO 5: Enable component scanning -->
    <!--
        15.12.1 mvc:annotation-driven in http://docs.spring.io/spring/docs/3.0.x/reference/mvc.html
        This tag registers the DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter beans that are required for Spring MVC to dispatch requests to @Controllers. The tag configures those two beans with sensible defaults based on what is present in your classpath. The defaults are:
        Support for Spring 3's Type ConversionService in addition to JavaBeans PropertyEditors during Data Binding. A ConversionService instance produced by the org.springframework.format.support.FormattingConversionServiceFactoryBean is used by default. This can be overriden by setting the conversion-service attribute.
        Support for formatting Number fields using the @NumberFormat annotation
        Support for formatting Date, Calendar, Long, and Joda Time fields using the @DateTimeFormat annotation, if Joda Time 1.3 or higher is present on the classpath.
        Support for validating @Controller inputs with @Valid, if a JSR-303 Provider is present on the classpath. The validation system can be explicitly configured by setting the validator attribute.
        Support for reading and writing XML, if JAXB is present on the classpath.
        Support for reading and writing JSON, if Jackson is present on the classpath.
    -->

	<mvc:annotation-driven/>

    <!--
        15.12.2 mvc:interceptors
        This tag allows you to register custom HandlerInterceptors or WebRequestInterceptors that should be applied to
        all HandlerMapping beans. You can also restrict the URL paths specifc interceptors apply to.
        An example of registering an interceptor applied to all URL paths:
    -->
	<mvc:interceptors>
		<!-- An interceptor which keeps a hibernate session open to allow lazy loading of form backing objects -->
		<bean class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
		    <property name="sessionFactory" ref="sessionFactory"/>
		</bean>
	</mvc:interceptors>

    <!--
        An example of registering an interceptor limited to a specific URL path:
        <mvc:interceptors>
            <mvc:interceptor>
                <mapping path="/secure/*"/>
                <bean class="org.example.SecurityInterceptor" />
            </mvc:interceptor>
        </mvc:interceptors>
    -->
	
	<!-- TODO 3: Add an InternalResourceViewResolver definition -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
</beans>
